<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.glog.domain.stock.mapper.IndexDailyMapper">

    <!-- 지수 특정 기간 동안의 최소, 최대, 거래일수, 평균 -->
    <select id="selectStatIndexCommon" parameterType="IndexDailyParam" resultType="IndexDailyResult" >
        SELECT  MIN(priceLow) priceLow, MAX(priceHigh) priceHigh, ROUND(SUM(priceFinal)/COUNT(*),2) priceAverage, COUNT(*) dataCount,
                MIN(volumeTrade) volumeLow, MAX(volumeTrade) volumeHigh, ROUND(SUM(volumeTrade)/COUNT(*),2) volumeAverage
        FROM    indexDaily
        WHERE   tradeDate BETWEEN #{startDate} AND #{endDate} AND marketCode=#{marketCode}
    </select>

    <!-- 지수 가격 특정 기간 동안의 표준편차 -->
    <select id="selectStatIndexPriceStdDev" parameterType="IndexDailyParam" resultType="IndexDailyResult" >
        SELECT  ROUND( SQRT( SUM( POW( priceFinal - #{priceAverage}, 2 ) ) / #{dataCount} ), 2 ) priceStandardDeviation
        FROM    indexDaily
        WHERE   tradeDate BETWEEN #{startDate} AND #{endDate} AND marketCode=#{marketCode}
    </select>

    <!-- 지수 거래량 특정 기간 동안의 표준편차 -->
    <select id="selectStatIndexVolumeStdDev" parameterType="IndexDailyParam" resultType="IndexDailyResult" >
        SELECT  ROUND( SQRT( SUM( POW( volumeTrade - #{volumeAverage}, 2 ) ) / #{dataCount} ), 2 ) volumeStandardDeviation
        FROM    indexDaily
        WHERE   tradeDate BETWEEN #{startDate} AND #{endDate} AND marketCode=#{marketCode}
    </select>











    <insert id="insertIndexDaily" parameterType="IndexDaily" useGeneratedKeys="true" keyProperty="indexDailyId">
        INSERT INTO indexDaily
            ( marketCode, tradeDate, priceFinal, priceChange, priceStart, priceHigh, priceLow, priceTrade, volumeTrade, rateChange, insertTime, updateTime )
        VALUES
            ( #{marketCode}, #{tradeDate}, #{priceFinal}, #{priceChange}, #{priceStart}, #{priceHigh}, #{priceLow}, #{priceTrade}, #{volumeTrade}, #{rateChange}, now(), now() )
    </insert>

    <insert id="insertsIndexDaily" parameterType="java.util.ArrayList" useGeneratedKeys="true" keyColumn="indexDailyId" keyProperty="indexDailyId">
        INSERT INTO stock
            ( marketCode, tradeDate, priceFinal, priceChange, priceStart, priceHigh, priceLow, priceTrade, volumeTrade, rateChange, insertTime, updateTime )
        VALUES
        <foreach collection="list" item="item" index="index" separator="," open="" close="">
            ( #{item.marketCode}, #{item.tradeDate}, #{item.priceFinal}, #{item.priceChange}, #{item.priceStart}, #{item.priceHigh}, #{item.priceLow}, #{item.priceTrade}, #{item.volumeTrade}, #{item.rateChange}, now(), now() )
        </foreach>
    </insert>

    <update id="updateIndexDaily" parameterType="IndexDaily">
        UPDATE 	indexDaily
        SET
        <trim prefix="" suffixOverrides=",">
            <if test="priceFinal != null">priceFinal = #{priceFinal},</if>
            <if test="priceChange != null">priceChange = #{priceChange},</if>
            <if test="priceStart != null">priceStart = #{priceStart},</if>
            <if test="priceHigh != null">priceHigh = #{priceHigh},</if>
            <if test="priceLow != null">priceLow = #{priceLow},</if>
            <if test="priceTrade != null">priceTrade = #{priceTrade},</if>
            <if test="volumeTrade != null">volumeTrade = #{volumeTrade},</if>
            <if test="rateChange != null">rateChange = #{rateChange},</if>
            updateTime = now()
        </trim>
        WHERE indexDaily.marketCode=#{marketCode}
        AND indexDaily.tradeDate=#{tradeDate}
    </update>

    <delete id="deleteIndexDaily" parameterType="IndexDaily">
        DELETE FROM indexDaily
        WHERE 	indexDailyId=#{indexDailyId}
    </delete>

    <select id="selectIndexDailyList" parameterType="IndexDailyParam" resultType="IndexDailyResult" >
        SELECT 	indexDaily.*
        FROM 	indexDaily
        <include refid="whereIndexDaily" ></include>
        <include refid="orderIndexDaily" ></include>
    </select>

    <select id="selectIndexDailyListCount" parameterType="IndexDailyParam" resultType="java.lang.Integer">
        SELECT 	COUNT(*)
        FROM   	indexDaily
        <include refid="whereIndexDaily" ></include>
    </select>

    <sql id="whereIndexDaily">
        <where>
            <trim prefixOverrides = "AND | OR">
                <if test="indexDailyId != null and indexDailyId != ''">AND indexDaily.indexDailyId=#{indexDailyId}</if>
                <if test="marketCode != null and marketCode != ''">AND indexDaily.marketCode=#{marketCode}</if>
                <if test="tradeDate != null and tradeDate != ''">AND indexDaily.tradeDate=#{tradeDate}</if>
                <if test="priceFinal != null and priceFinal != ''">AND indexDaily.priceFinal=#{priceFinal}</if>
                <if test="priceChange != null and priceChange != ''">AND indexDaily.priceChange=#{priceChange}</if>
                <if test="priceStart != null and priceStart != ''">AND indexDaily.priceStart=#{priceStart}</if>
                <if test="priceHigh != null and priceHigh != ''">AND indexDaily.priceHigh=#{priceHigh}</if>
                <if test="priceLow != null and priceLow != ''">AND indexDaily.priceLow=#{priceLow}</if>
                <if test="priceTrade != null and priceTrade != ''">AND indexDaily.priceTrade=#{priceTrade}</if>
                <if test="volumeTrade != null and volumeTrade != ''">AND indexDaily.volumeTrade=#{volumeTrade}</if>
                <if test="rateChange != null and rateChange != ''">AND indexDaily.rateChange=#{rateChange}</if>
                <if test="startDate != null and startDate != ''">AND indexDaily.tradeDate <![CDATA[ >= ]]> #{startDate}</if>
                <if test="endDate != null and endDate != ''">AND indexDaily.tradeDate <![CDATA[ <= ]]> #{endDate}</if>
                <if test="beforeDate != null and beforeDate != ''">AND indexDaily.tradeDate <![CDATA[ < ]]> #{beforeDate}</if>
            </trim>
        </where>
    </sql>

    <sql id="orderIndexDaily">
        <if test='pagingParam.sortIndex != null and pagingParam.sortIndex != ""'>ORDER BY
            <choose>
                <when test="pagingParam.sortIndex eq 'indexDailyId'">indexDailyId</when>
                <when test="pagingParam.sortIndex eq 'marketCode'">marketCode</when>
                <when test="pagingParam.sortIndex eq 'tradeDate'">tradeDate</when>
                <when test="pagingParam.sortIndex eq 'priceFinal'">priceFinal</when>
                <when test="pagingParam.sortIndex eq 'priceChange'">priceChange</when>
                <when test="pagingParam.sortIndex eq 'priceStart'">priceStart</when>
                <when test="pagingParam.sortIndex eq 'priceHigh'">priceHigh</when>
                <when test="pagingParam.sortIndex eq 'priceLow'">priceLow</when>
                <when test="pagingParam.sortIndex eq 'priceTrade'">priceTrade</when>
                <when test="pagingParam.sortIndex eq 'volumeTrade'">volumeTrade</when>
                <when test="pagingParam.sortIndex eq 'rateChange'">rateChange</when>
                <otherwise>indexDailyId</otherwise>
            </choose>
            <choose>
                <when test="pagingParam.sortType != null and pagingParam.sortType.equalsIgnoreCase('desc')">DESC</when>
                <otherwise>ASC</otherwise>
            </choose>
        </if>
        <if test="pagingParam.rows gt 0">
            LIMIT #{pagingParam.startIndex}, #{pagingParam.endIndex}
        </if>
    </sql>
    
</mapper>
