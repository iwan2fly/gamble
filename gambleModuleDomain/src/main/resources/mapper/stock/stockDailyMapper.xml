<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.glog.domain.stock.mapper.StockDailyMapper">

    <!-- 특정 기간동안 거래된 주식 목록 -->
    <select id="selectStockListBetween" parameterType="StockDailyParam" resultType="StockDailyResult" >
        SELECT 	stockCode
        FROM 	stockDaily
        WHERE   tradeDate between #{startDate} AND #{endDate}
        GROUP BY stockCode
    </select>

    <!-- 주식 특정 기간 동안의 최소, 최대, 거래일수, 평균 -->
    <select id="selectStatStockCommon" parameterType="StockDailyParam" resultType="StockDailyResult" >
        SELECT  stat1.*,
                pricePrevious.pricePrevious,
                priceStart.priceStart,
                priceFinal.priceFinal,
                priceLow.priceLowDate,
                priceHigh.priceHighDate,
                IFNULL(riseCount, 0) riseCount, IFNULL(evenCount,0) evenCount, IFNULL(fallCount, 0) fallCount
        FROM (
            SELECT  stockCode, MIN(priceLow) priceLow, MAX(priceHigh) priceHigh, ROUND(SUM(priceFinal)/COUNT(*), 0) priceAverage, COUNT(*) dataCount,
                    MIN(volumeTrade) volumeLow, MAX(volumeTrade) volumeHigh, ROUND(SUM(volumeTrade)/COUNT(*), 0) volumeAverage,
                    MIN(foreignerStockCount) foreignerLow, MAX(foreignerStockCount) foreignerHigh, ROUND(SUM(foreignerStockCount)/COUNT(*), 0) foreignerAverage
            FROM    stockDaily
            WHERE   tradeDate BETWEEN #{startDate} AND #{endDate} AND stockCode=#{stockCode}
            GROUP BY stockCode
        ) stat1
        <!-- 상승 건수 -->
        LEFT JOIN (
            SELECT stockCode, COUNT(*) riseCount FROM stockDaily WHERE tradeDate BETWEEN #{startDate} AND #{endDate} AND stockCode=#{stockCode} AND rateChange > 0
        ) riseCount ON stat1.stockCode = riseCount.stockCode
        <!-- 보합 건수 -->
        LEFT JOIN (
            SELECT stockCode, COUNT(*) evenCount FROM stockDaily WHERE tradeDate BETWEEN #{startDate} AND #{endDate} AND stockCode=#{stockCode} AND rateChange = 0
        ) evenCount ON stat1.stockCode = evenCount.stockCode
        <!-- 하락 건수 -->
        LEFT JOIN (
            SELECT stockCode, COUNT(*) fallCount FROM stockDaily WHERE tradeDate BETWEEN #{startDate} AND #{endDate} AND stockCode=#{stockCode} AND rateChange <![CDATA[ < ]]> 0
        ) fallCount ON stat1.stockCode = fallCount.stockCode
        <!-- 이전 가격 -->
        LEFT JOIN (
            SELECT stockCode, priceFinal pricePrevious
            FROM stockDaily
            WHERE stockCode=#{stockCode} AND tradeDate <![CDATA[ < ]]> #{startDate}
            ORDER BY tradeDate DESC
            LIMIT 1
        ) pricePrevious ON stat1.stockCode = pricePrevious.stockCode
        <!-- 시작가, 외국인 시작 시 보유량 -->
        LEFT JOIN (
            SELECT stockCode, priceFinal priceStart, foreignerStockCount foreignerStart
            FROM stockDaily
            WHERE stockCode=#{stockCode} AND tradeDate >= #{startDate}
            ORDER BY tradeDate ASC
            LIMIT 1
        ) priceStart ON stat1.stockCode = priceStart.stockCode
        <!-- 최종가, 외국인 최종 보유량 -->
        LEFT JOIN (
            SELECT stockCode, priceFinal
            FROM stockDaily
            WHERE stockCode=#{stockCode} AND tradeDate <![CDATA[ <= ]]> #{endDate}
            ORDER BY tradeDate DESC
            LIMIT 1
        ) priceFinal ON stat1.stockCode = priceFinal.stockCode
        <!-- 최저가일자 -->
        LEFT JOIN (
            SELECT stockCode, tradeDate priceLowDate
            FROM stockDaily
            WHERE stockCode=#{stockCode} AND tradeDate BETWEEN #{startDate} AND #{endDate}
            ORDER BY priceLow ASC, tradeDate DESC
            LIMIT 1
        ) priceLow ON stat1.stockCode = priceLow.stockCode
        <!-- 최고가일자 -->
        LEFT JOIN (
            SELECT stockCode, tradeDate priceHighDate
            FROM stockDaily
            WHERE stockCode=#{stockCode} AND tradeDate BETWEEN #{startDate} AND #{endDate}
            ORDER BY priceHigh DESC, tradeDate DESC
            LIMIT 1
        ) priceHigh ON stat1.stockCode = priceHigh.stockCode
        <!-- 거래량 최저일자 -->
        LEFT JOIN (
            SELECT stockCode, tradeDate volumeLowDate
            FROM stockDaily
            WHERE stockCode=#{stockCode} AND tradeDate BETWEEN #{startDate} AND #{endDate}
            ORDER BY volumeTrade ASC, tradeDate DESC
            LIMIT 1
        ) volumeLow ON stat1.stockCode = volumeLow.stockCode
        <!-- 거래량 최고일자 -->
            LEFT JOIN (
            SELECT stockCode, tradeDate volumeHighDate
            FROM stockDaily
            WHERE stockCode=#{stockCode} AND tradeDate BETWEEN  #{startDate} AND #{endDate}
            ORDER BY volumeTrade DESC, tradeDate DESC
            LIMIT 1
        ) volumeHigh ON stat1.stockCode = volumeHigh.stockCode
    </select>



    <!-- 주식 가격 특정 기간 동안의 표준편차 -->
    <select id="selectStatStockPriceStdDev" parameterType="StockDailyParam" resultType="StockDailyResult" >
        SELECT  ROUND( SQRT( SUM( POW( priceFinal - #{priceAverage}, 2 ) ) / #{dataCount} ), 0 ) priceStandardDeviation
        FROM    stockDaily
        WHERE   tradeDate BETWEEN #{startDate} AND #{endDate} AND stockCode=#{stockCode}
    </select>

    <!-- 주식 거래량 특정 기간 동안의 표준편차 -->
    <select id="selectStatStockVolumeStdDev" parameterType="StockDailyParam" resultType="StockDailyResult" >
        SELECT  ROUND( SQRT( SUM( POW( volumeTrade - #{volumeAverage}, 2 ) ) / #{dataCount} ), 0 ) volumeStandardDeviation
        FROM    stockDaily
        WHERE   tradeDate BETWEEN #{startDate} AND #{endDate} AND stockCode=#{stockCode}
    </select>

    <!-- 주식 외국인 보유량 특정 기간 동안의 표준편차 -->
    <select id="selectStatStockForeignerStdDev" parameterType="StockDailyParam" resultType="StockDailyResult" >
        SELECT  ROUND( SQRT( SUM( POW( foreignerStockCount - #{foreignerAverage}, 2 ) ) / #{dataCount} ), 0 ) foreignerStandardDeviation
        FROM    stockDaily
        WHERE   tradeDate BETWEEN #{startDate} AND #{endDate} AND stockCode=#{stockCode}
    </select>
    
    
    
    
    <insert id="insertStockDaily" parameterType="StockDaily" useGeneratedKeys="true" keyProperty="stockDailyId">
        INSERT INTO stockDaily
            ( isin, stockCode, tradeDate, marketCode, stockName, priceFinal, priceChange, priceStart, priceHigh, priceLow, priceTrade, volumeTrade, priceTotal, volumeTotal, rateChange, volumeOrg, volumeForeigner, foreignerStockCount, foreignerHoldRate, insertTime, updateTime )
        VALUES
            ( #{isin}, #{stockCode}, #{tradeDate}, #{marketCode}, #{stockName}, #{priceFinal}, #{priceChange}, #{priceStart}, #{priceHigh}, #{priceLow}, #{priceTrade}, #{volumeTrade}, #{priceTotal}, #{volumeTotal}, #{rateChange}, #{volumeOrg}, #{volumeForeigner}, #{foreignerStockCount}, #{foreignerHoldRate}, now(), now() )
    </insert>

    <insert id="insertsStockDaily" parameterType="java.util.ArrayList" useGeneratedKeys="true" keyColumn="stockDailyId" keyProperty="stockDailyId">
        INSERT INTO stock
            ( isin, stockCode, tradeDate, marketCode, stockName, priceFinal, priceChange, priceStart, priceHigh, priceLow, priceTrade, volumeTrade, priceTotal, volumeTotal, rateChange, volumeOrg, volumeForeigner, foreignerStockCount, foreignerHoldRate, insertTime, updateTime )
        VALUES
        <foreach collection="list" item="item" index="index" separator="," open="" close="">
            ( #{item.isin}, #{item.stockCode}, #{item.tradeDate}, #{item.marketCode}, #{item.stockName}, #{item.priceFinal}, #{item.priceChange}, #{item.priceStart}, #{item.priceHigh}, #{item.priceLow}, #{item.priceTrade}, #{item.volumeTrade}, #{item.priceTotal}, #{item.volumeTotal},  #{item.rateChange}, #{item.volumeOrg}, #{item.volumeForeigner}, #{item.foreignerStockCount}, #{item.foreignerHoldRate}, now(), now() )
        </foreach>
    </insert>

    <update id="updateStockDaily" parameterType="StockDaily">
        UPDATE 	stockDaily
        SET
        <trim prefix="" suffixOverrides=",">
            <if test="isin != null">isin = #{isin},</if>
            <if test="marketCode != null">marketCode = #{marketCode},</if>
            <if test="stockName != null">stockName = #{stockName},</if>
            <if test="priceFinal != null">priceFinal = #{priceFinal},</if>
            <if test="priceChange != null">priceChange = #{priceChange},</if>
            <if test="priceStart != null">priceStart = #{priceStart},</if>
            <if test="priceHigh != null">priceHigh = #{priceHigh},</if>
            <if test="priceLow != null">priceLow = #{priceLow},</if>
            <if test="priceTrade != null">priceTrade = #{priceTrade},</if>
            <if test="volumeTrade != null">volumeTrade = #{volumeTrade},</if>
            <if test="priceTotal != null">priceTotal = #{priceTotal},</if>
            <if test="volumeTotal != null">volumeTotal = #{volumeTotal},</if>
            <if test="rateChange != null">rateChange = #{rateChange},</if>
            <if test="volumeOrg != null">volumeOrg = #{volumeOrg},</if>
            <if test="volumeForeigner != null">volumeForeigner = #{volumeForeigner},</if>
            <if test="foreignerStockCount != null">foreignerStockCount = #{foreignerStockCount},</if>
            <if test="foreignerHoldRate != null">foreignerHoldRate = #{foreignerHoldRate},</if>
            updateTime = now()
        </trim>
        WHERE stockDaily.stockCode=#{stockCode}
        AND stockDaily.tradeDate=#{tradeDate}
    </update>

    <delete id="deleteStockDaily" parameterType="StockDaily">
        DELETE FROM stockDaily
        WHERE 	stockDailyId=#{stockDailyId}
    </delete>

    <select id="selectStockDailyList" parameterType="StockDailyParam" resultType="StockDailyResult" >
        SELECT 	stockDaily.*
        FROM 	stockDaily
        <include refid="whereStockDaily" ></include>
        <include refid="orderStockDaily" ></include>
    </select>

    <select id="selectStockDailyListCount" parameterType="StockDailyParam" resultType="java.lang.Integer">
        SELECT 	COUNT(*)
        FROM   	stockDaily
        <include refid="whereStockDaily" ></include>
    </select>

    <sql id="whereStockDaily">
        <where>
            <trim prefixOverrides = "AND | OR">
                <if test="stockDailyId != null and stockDailyId != ''">AND stockDaily.stockDailyId=#{stockDailyId}</if>
                <if test="isin != null and isin != ''">AND stockDaily.isin=#{isin}</if>
                <if test="stockCode != null and stockCode != ''">AND stockDaily.stockCode=#{stockCode}</if>
                <if test="marketCode != null and marketCode != ''">AND stockDaily.marketCode=#{marketCode}</if>
                <if test="tradeDate != null and tradeDate != ''">AND stockDaily.tradeDate=#{tradeDate}</if>
                <if test="stockName != null and stockName != ''">AND stockDaily.stockName=#{stockName}</if>
                <if test="priceFinal != null and priceFinal != ''">AND stockDaily.priceFinal=#{priceFinal}</if>
                <if test="priceChange != null and priceChange != ''">AND stockDaily.priceChange=#{priceChange}</if>
                <if test="priceStart != null and priceStart != ''">AND stockDaily.priceStart=#{priceStart}</if>
                <if test="priceHigh != null and priceHigh != ''">AND stockDaily.priceHigh=#{priceHigh}</if>
                <if test="priceLow != null and priceLow != ''">AND stockDaily.priceLow=#{priceLow}</if>
                <if test="priceTrade != null and priceTrade != ''">AND stockDaily.priceTrade=#{priceTrade}</if>
                <if test="volumeTrade != null and volumeTrade != ''">AND stockDaily.volumeTrade=#{volumeTrade}</if>
                <if test="priceTotal != null and priceTotal != ''">AND stockDaily.priceTotal=#{priceTotal}</if>
                <if test="volumeTotal != null and volumeTotal != ''">AND stockDaily.volumeTotal=#{volumeTotal}</if>
                <if test="volumeOrg != null and volumeOrg != ''">AND stockDaily.volumeOrg=#{volumeOrg}</if>
                <if test="volumeForeigner != null and volumeForeigner != ''">AND stockDaily.volumeForeigner=#{volumeForeigner}</if>
                <if test="foreignerStockCount != null and foreignerStockCount != ''">AND stockDaily.foreignerStockCount=#{foreignerStockCount}</if>
                <if test="foreignerHoldRate != null and foreignerHoldRate != ''">AND stockDaily.foreignerHoldRate=#{foreignerHoldRate}</if>
                <if test="startDate != null and startDate != ''">AND stockDaily.tradeDate <![CDATA[ >= ]]> #{startDate}</if>
                <if test="endDate != null and endDate != ''">AND stockDaily.tradeDate <![CDATA[ <= ]]> #{endDate}</if>
                <if test="beforeDate != null and beforeDate != ''">AND stockDaily.tradeDate <![CDATA[ < ]]> #{beforeDate}</if>
                <if test="pagingParam.filter != null and pagingParam.filter != ''">AND stockDaily.dailyStockName like CONCAT('%',#{pagingParam.filter},'%')</if>
            </trim>
        </where>
    </sql>

    <sql id="orderStockDaily">
        <if test='pagingParam.sortIndex != null and pagingParam.sortIndex != ""'>ORDER BY
            <choose>
                <when test="pagingParam.sortIndex eq 'stockDailyId'">stockDailyId</when>
                <when test="pagingParam.sortIndex eq 'isin'">isin</when>
                <when test="pagingParam.sortIndex eq 'stockCode'">stockCode</when>
                <when test="pagingParam.sortIndex eq 'marketCode'">marketCode</when>
                <when test="pagingParam.sortIndex eq 'tradeDate'">tradeDate</when>
                <when test="pagingParam.sortIndex eq 'stockName'">stockName</when>
                <when test="pagingParam.sortIndex eq 'priceFinal'">priceFinal</when>
                <when test="pagingParam.sortIndex eq 'priceChange'">priceChange</when>
                <when test="pagingParam.sortIndex eq 'priceStart'">priceStart</when>
                <when test="pagingParam.sortIndex eq 'priceHigh'">priceHigh</when>
                <when test="pagingParam.sortIndex eq 'priceLow'">priceLow</when>
                <when test="pagingParam.sortIndex eq 'priceTrade'">priceTrade</when>
                <when test="pagingParam.sortIndex eq 'volumeTrade'">volumeTrade</when>
                <when test="pagingParam.sortIndex eq 'priceTotal'">priceTotal</when>
                <when test="pagingParam.sortIndex eq 'volumeTotal'">volumeTotal</when>
                <when test="pagingParam.sortIndex eq 'volumeOrg'">volumeOrg</when>
                <when test="pagingParam.sortIndex eq 'volumeForeigner'">volumeForeigner</when>
                <when test="pagingParam.sortIndex eq 'foreignerStockCount'">foreignerStockCount</when>
                <when test="pagingParam.sortIndex eq 'foreignerHoldRate'">foreignerHoldRate</when>
                <otherwise>stockDailyId</otherwise>
            </choose>
            <choose>
                <when test="pagingParam.sortType != null and pagingParam.sortType.equalsIgnoreCase('desc')">DESC</when>
                <otherwise>ASC</otherwise>
            </choose>
        </if>
        <if test="pagingParam.rows gt 0">
            LIMIT #{pagingParam.startIndex}, #{pagingParam.endIndex}
        </if>
    </sql>
    
</mapper>